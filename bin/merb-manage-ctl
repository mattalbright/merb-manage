#!/usr/bin/ruby
#
# Copyright (c) 2008 El Draper, el@eldiablo.co.uk
#
# merb-manage-ctl     Controller script for starting/stopping/restarting configured Merb applications
#
require "yaml"

# Default config directory
configuration_directory = "/etc/merb_manage"

# This iterates through each config found in the configuration directory, executing the specified block for each
def each_config(config, &block)
  begin
    Dir.entries(config).select { |e| e[e.length - 3, 3] == "yml" }.each do |yml|
      begin
        result = yield YAML.load(open(File.join(config, yml)))
        puts "#{yml}:"
        result.split("\n").each { |r| puts r }
      rescue Exception => err
        puts "Exception (#{yml}): #{err.message}"
      end
    end
  rescue Errno::ENOENT
    puts "Unable to find directory - #{config}"
  rescue Errno::ENOTDIR
    puts "Not a directory - #{config}"
  end
end

# This starts the server as per the specified yml config
def start(yml)
  command = build_command(yml)
  command += "-d " if yml['servers'].nil?
  command += build_command_line_options(yml, 
    %w'user group adapter environment servers port pid_file log_file logging mutex')
  `#{command}`
end

# This stops the server as per the specified yml config
def stop(yml)
  command = build_command(yml)
  command += build_command_line_options(yml, %w'servers pid_file')
  `#{command} -K all && #{command} -k all`
end

def build_command(yml)
  command = "merb"
  command = "cd #{yml['path']} && #{yml['executable']}" unless yml['executable'].nil?
  command += " -m #{yml['path']}"
  command
end

def build_command_line_options(yml, config_items)
  config_items.map {|c| build_command_line_option(yml, c)}.join
end

def build_command_line_option(yml, config_item)
  if yml[config_item].nil?
    ""
  else
    " #{command_line_option_for(config_item)} #{yml[config_item]}"
  end
end

def command_line_option_for(yml_string)
  {
    'adapter' => '-a',
    'environment' => '-e',
    'group' => '-G',
    'log_file' => '-L',
    'logging' => '-l',
    'mutex' => '-X',
    'path' => '-m',
    'pid_file' => '-P',
    'port' => '-p',
    'servers' => '-c',
    'user' => '-u',
  }[yml_string]
end

# See if there is a -c argument
if ARGV.include?("-c")
  # Attempt to grab the specified config directory
  config = ARGV[ARGV.index("-c") + 1]
  configuration_directory = config unless config.nil?
end

# Evaluate and execute the action being requested
case ARGV[0]
  when "start":
    each_config(configuration_directory) do |yml|
      start(yml)
    end
  when "restart":
    each_config(configuration_directory) do |yml|
      stop(yml)
      start(yml)
    end
  when "stop":
    each_config(configuration_directory) do |yml|
      stop(yml)
    end
else
  # Print out the usage as the arguments didn't match a known action
  puts "Usage: merb-manage-ctl {start|stop|restart} (-c CONFIG_DIR)"
end